
EEE3088F_Prox_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027e0  080027e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027e0  080027e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027e0  080027e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e0  080027e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027e4  080027e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  080027f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080027f4  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb91  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001948  00000000  00000000  0002bbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002d510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002dee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001152e  00000000  00000000  0002e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d350  00000000  00000000  0003fd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068b61  00000000  00000000  0004d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5bf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c4  00000000  00000000  000b5c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002790 	.word	0x08002790

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002790 	.word	0x08002790

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb47 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f817 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f941 	bl	80004b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000232:	f000 f8cf 	bl	80003d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000236:	f000 f90d 	bl	8000454 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800023a:	f000 f86f 	bl	800031c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  MX_I2C2_Init();
 800023e:	f000 f9a9 	bl	8000594 <MX_I2C2_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000242:	4b05      	ldr	r3, [pc, #20]	; (8000258 <main+0x38>)
 8000244:	2201      	movs	r2, #1
 8000246:	2108      	movs	r1, #8
 8000248:	0018      	movs	r0, r3
 800024a:	f001 f82f 	bl	80012ac <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800024e:	2064      	movs	r0, #100	; 0x64
 8000250:	f000 fb96 	bl	8000980 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000254:	e7fe      	b.n	8000254 <main+0x34>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	48000400 	.word	0x48000400

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b097      	sub	sp, #92	; 0x5c
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	2428      	movs	r4, #40	; 0x28
 8000264:	193b      	adds	r3, r7, r4
 8000266:	0018      	movs	r0, r3
 8000268:	2330      	movs	r3, #48	; 0x30
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f002 fa87 	bl	8002780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000272:	2318      	movs	r3, #24
 8000274:	18fb      	adds	r3, r7, r3
 8000276:	0018      	movs	r0, r3
 8000278:	2310      	movs	r3, #16
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f002 fa7f 	bl	8002780 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	0018      	movs	r0, r3
 8000286:	2314      	movs	r3, #20
 8000288:	001a      	movs	r2, r3
 800028a:	2100      	movs	r1, #0
 800028c:	f002 fa78 	bl	8002780 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000290:	0021      	movs	r1, r4
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2212      	movs	r2, #18
 8000296:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2201      	movs	r2, #1
 800029c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2201      	movs	r2, #1
 80002a2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2210      	movs	r2, #16
 80002a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2210      	movs	r2, #16
 80002ae:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2200      	movs	r2, #0
 80002b4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	0018      	movs	r0, r3
 80002ba:	f001 f943 	bl	8001544 <HAL_RCC_OscConfig>
 80002be:	1e03      	subs	r3, r0, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002c2:	f000 f9a7 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	2118      	movs	r1, #24
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2207      	movs	r2, #7
 80002cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2100      	movs	r1, #0
 80002e4:	0018      	movs	r0, r3
 80002e6:	f001 fc47 	bl	8001b78 <HAL_RCC_ClockConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002ee:	f000 f991 	bl	8000614 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2221      	movs	r2, #33	; 0x21
 80002f6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	0018      	movs	r0, r3
 8000308:	f001 fd7a 	bl	8001e00 <HAL_RCCEx_PeriphCLKConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000310:	f000 f980 	bl	8000614 <Error_Handler>
  }
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b017      	add	sp, #92	; 0x5c
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	0018      	movs	r0, r3
 8000326:	230c      	movs	r3, #12
 8000328:	001a      	movs	r2, r3
 800032a:	2100      	movs	r1, #0
 800032c:	f002 fa28 	bl	8002780 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_ADC_Init+0xb0>)
 8000332:	4a27      	ldr	r2, [pc, #156]	; (80003d0 <MX_ADC_Init+0xb4>)
 8000334:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000336:	4b25      	ldr	r3, [pc, #148]	; (80003cc <MX_ADC_Init+0xb0>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800033c:	4b23      	ldr	r3, [pc, #140]	; (80003cc <MX_ADC_Init+0xb0>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000342:	4b22      	ldr	r3, [pc, #136]	; (80003cc <MX_ADC_Init+0xb0>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000348:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_ADC_Init+0xb0>)
 800034a:	2201      	movs	r2, #1
 800034c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <MX_ADC_Init+0xb0>)
 8000350:	2204      	movs	r2, #4
 8000352:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000354:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <MX_ADC_Init+0xb0>)
 8000356:	2200      	movs	r2, #0
 8000358:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800035a:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <MX_ADC_Init+0xb0>)
 800035c:	2200      	movs	r2, #0
 800035e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000360:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_ADC_Init+0xb0>)
 8000362:	2200      	movs	r2, #0
 8000364:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000366:	4b19      	ldr	r3, [pc, #100]	; (80003cc <MX_ADC_Init+0xb0>)
 8000368:	2200      	movs	r2, #0
 800036a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800036c:	4b17      	ldr	r3, [pc, #92]	; (80003cc <MX_ADC_Init+0xb0>)
 800036e:	22c2      	movs	r2, #194	; 0xc2
 8000370:	32ff      	adds	r2, #255	; 0xff
 8000372:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_ADC_Init+0xb0>)
 8000376:	2200      	movs	r2, #0
 8000378:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_ADC_Init+0xb0>)
 800037c:	2224      	movs	r2, #36	; 0x24
 800037e:	2100      	movs	r1, #0
 8000380:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000382:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_ADC_Init+0xb0>)
 8000384:	2201      	movs	r2, #1
 8000386:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <MX_ADC_Init+0xb0>)
 800038a:	0018      	movs	r0, r3
 800038c:	f000 fb1c 	bl	80009c8 <HAL_ADC_Init>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000394:	f000 f93e 	bl	8000614 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2280      	movs	r2, #128	; 0x80
 80003a2:	0152      	lsls	r2, r2, #5
 80003a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	0552      	lsls	r2, r2, #21
 80003ac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ae:	1d3a      	adds	r2, r7, #4
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_ADC_Init+0xb0>)
 80003b2:	0011      	movs	r1, r2
 80003b4:	0018      	movs	r0, r3
 80003b6:	f000 fc47 	bl	8000c48 <HAL_ADC_ConfigChannel>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003be:	f000 f929 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	b004      	add	sp, #16
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	20000028 	.word	0x20000028
 80003d0:	40012400 	.word	0x40012400

080003d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_I2C1_Init+0x74>)
 80003da:	4a1c      	ldr	r2, [pc, #112]	; (800044c <MX_I2C1_Init+0x78>)
 80003dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003de:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <MX_I2C1_Init+0x74>)
 80003e0:	4a1b      	ldr	r2, [pc, #108]	; (8000450 <MX_I2C1_Init+0x7c>)
 80003e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003e4:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_I2C1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ea:	4b17      	ldr	r3, [pc, #92]	; (8000448 <MX_I2C1_Init+0x74>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <MX_I2C1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003f6:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_I2C1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003fc:	4b12      	ldr	r3, [pc, #72]	; (8000448 <MX_I2C1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_I2C1_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_I2C1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_I2C1_Init+0x74>)
 8000410:	0018      	movs	r0, r3
 8000412:	f000 ff69 	bl	80012e8 <HAL_I2C_Init>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800041a:	f000 f8fb 	bl	8000614 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <MX_I2C1_Init+0x74>)
 8000420:	2100      	movs	r1, #0
 8000422:	0018      	movs	r0, r3
 8000424:	f000 fff6 	bl	8001414 <HAL_I2CEx_ConfigAnalogFilter>
 8000428:	1e03      	subs	r3, r0, #0
 800042a:	d001      	beq.n	8000430 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800042c:	f000 f8f2 	bl	8000614 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <MX_I2C1_Init+0x74>)
 8000432:	2100      	movs	r1, #0
 8000434:	0018      	movs	r0, r3
 8000436:	f001 f839 	bl	80014ac <HAL_I2CEx_ConfigDigitalFilter>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800043e:	f000 f8e9 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000068 	.word	0x20000068
 800044c:	40005400 	.word	0x40005400
 8000450:	2000090e 	.word	0x2000090e

08000454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <MX_USART1_UART_Init+0x58>)
 800045a:	4a15      	ldr	r2, [pc, #84]	; (80004b0 <MX_USART1_UART_Init+0x5c>)
 800045c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800045e:	4b13      	ldr	r3, [pc, #76]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000460:	2296      	movs	r2, #150	; 0x96
 8000462:	0212      	lsls	r2, r2, #8
 8000464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_USART1_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_USART1_UART_Init+0x58>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_USART1_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <MX_USART1_UART_Init+0x58>)
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fd8f 	bl	8001fbc <HAL_UART_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004a2:	f000 f8b7 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000bc 	.word	0x200000bc
 80004b0:	40013800 	.word	0x40013800

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b089      	sub	sp, #36	; 0x24
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	240c      	movs	r4, #12
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	0018      	movs	r0, r3
 80004c0:	2314      	movs	r3, #20
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f002 f95b 	bl	8002780 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ca:	4b30      	ldr	r3, [pc, #192]	; (800058c <MX_GPIO_Init+0xd8>)
 80004cc:	695a      	ldr	r2, [r3, #20]
 80004ce:	4b2f      	ldr	r3, [pc, #188]	; (800058c <MX_GPIO_Init+0xd8>)
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	03c9      	lsls	r1, r1, #15
 80004d4:	430a      	orrs	r2, r1
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	4b2c      	ldr	r3, [pc, #176]	; (800058c <MX_GPIO_Init+0xd8>)
 80004da:	695a      	ldr	r2, [r3, #20]
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	03db      	lsls	r3, r3, #15
 80004e0:	4013      	ands	r3, r2
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b29      	ldr	r3, [pc, #164]	; (800058c <MX_GPIO_Init+0xd8>)
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	4b28      	ldr	r3, [pc, #160]	; (800058c <MX_GPIO_Init+0xd8>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0289      	lsls	r1, r1, #10
 80004f0:	430a      	orrs	r2, r1
 80004f2:	615a      	str	r2, [r3, #20]
 80004f4:	4b25      	ldr	r3, [pc, #148]	; (800058c <MX_GPIO_Init+0xd8>)
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	029b      	lsls	r3, r3, #10
 80004fc:	4013      	ands	r3, r2
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4b22      	ldr	r3, [pc, #136]	; (800058c <MX_GPIO_Init+0xd8>)
 8000504:	695a      	ldr	r2, [r3, #20]
 8000506:	4b21      	ldr	r3, [pc, #132]	; (800058c <MX_GPIO_Init+0xd8>)
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	02c9      	lsls	r1, r1, #11
 800050c:	430a      	orrs	r2, r1
 800050e:	615a      	str	r2, [r3, #20]
 8000510:	4b1e      	ldr	r3, [pc, #120]	; (800058c <MX_GPIO_Init+0xd8>)
 8000512:	695a      	ldr	r2, [r3, #20]
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	02db      	lsls	r3, r3, #11
 8000518:	4013      	ands	r3, r2
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800051e:	2390      	movs	r3, #144	; 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	2200      	movs	r2, #0
 8000524:	2102      	movs	r1, #2
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fec0 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_GPIO_Init+0xdc>)
 800052e:	2200      	movs	r2, #0
 8000530:	2108      	movs	r1, #8
 8000532:	0018      	movs	r0, r3
 8000534:	f000 feba 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2202      	movs	r2, #2
 800053c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2201      	movs	r2, #1
 8000542:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	193a      	adds	r2, r7, r4
 8000552:	2390      	movs	r3, #144	; 0x90
 8000554:	05db      	lsls	r3, r3, #23
 8000556:	0011      	movs	r1, r2
 8000558:	0018      	movs	r0, r3
 800055a:	f000 fd37 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800055e:	0021      	movs	r1, r4
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2208      	movs	r2, #8
 8000564:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2201      	movs	r2, #1
 800056a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000578:	187b      	adds	r3, r7, r1
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <MX_GPIO_Init+0xdc>)
 800057c:	0019      	movs	r1, r3
 800057e:	0010      	movs	r0, r2
 8000580:	f000 fd24 	bl	8000fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b009      	add	sp, #36	; 0x24
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	48000400 	.word	0x48000400

08000594 <MX_I2C2_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_I2C2_Init+0x74>)
 800059a:	4a1c      	ldr	r2, [pc, #112]	; (800060c <MX_I2C2_Init+0x78>)
 800059c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MX_I2C2_Init+0x74>)
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <MX_I2C2_Init+0x7c>)
 80005a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_I2C2_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_I2C2_Init+0x74>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_I2C2_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_I2C2_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_I2C2_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_I2C2_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_I2C2_Init+0x74>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_I2C2_Init+0x74>)
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fe89 	bl	80012e8 <HAL_I2C_Init>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80005da:	f000 f81b 	bl	8000614 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <MX_I2C2_Init+0x74>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 ff16 	bl	8001414 <HAL_I2CEx_ConfigAnalogFilter>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80005ec:	f000 f812 	bl	8000614 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MX_I2C2_Init+0x74>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 ff59 	bl	80014ac <HAL_I2CEx_ConfigDigitalFilter>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80005fe:	f000 f809 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000144 	.word	0x20000144
 800060c:	40005800 	.word	0x40005800
 8000610:	2000090e 	.word	0x2000090e

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_MspInit+0x44>)
 8000628:	699a      	ldr	r2, [r3, #24]
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <HAL_MspInit+0x44>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	619a      	str	r2, [r3, #24]
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_MspInit+0x44>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_MspInit+0x44>)
 8000640:	69da      	ldr	r2, [r3, #28]
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_MspInit+0x44>)
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	0549      	lsls	r1, r1, #21
 8000648:	430a      	orrs	r2, r1
 800064a:	61da      	str	r2, [r3, #28]
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_MspInit+0x44>)
 800064e:	69da      	ldr	r2, [r3, #28]
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	055b      	lsls	r3, r3, #21
 8000654:	4013      	ands	r3, r2
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b08b      	sub	sp, #44	; 0x2c
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	2414      	movs	r4, #20
 8000672:	193b      	adds	r3, r7, r4
 8000674:	0018      	movs	r0, r3
 8000676:	2314      	movs	r3, #20
 8000678:	001a      	movs	r2, r3
 800067a:	2100      	movs	r1, #0
 800067c:	f002 f880 	bl	8002780 <memset>
  if(hadc->Instance==ADC1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <HAL_ADC_MspInit+0x84>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d12b      	bne.n	80006e2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <HAL_ADC_MspInit+0x88>)
 800068c:	699a      	ldr	r2, [r3, #24]
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <HAL_ADC_MspInit+0x88>)
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0089      	lsls	r1, r1, #2
 8000694:	430a      	orrs	r2, r1
 8000696:	619a      	str	r2, [r3, #24]
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <HAL_ADC_MspInit+0x88>)
 800069a:	699a      	ldr	r2, [r3, #24]
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4013      	ands	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_ADC_MspInit+0x88>)
 80006a8:	695a      	ldr	r2, [r3, #20]
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_ADC_MspInit+0x88>)
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	0289      	lsls	r1, r1, #10
 80006b0:	430a      	orrs	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_ADC_MspInit+0x88>)
 80006b6:	695a      	ldr	r2, [r3, #20]
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	029b      	lsls	r3, r3, #10
 80006bc:	4013      	ands	r3, r2
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2203      	movs	r2, #3
 80006cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	193a      	adds	r2, r7, r4
 80006d6:	2390      	movs	r3, #144	; 0x90
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fc75 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b00b      	add	sp, #44	; 0x2c
 80006e8:	bd90      	pop	{r4, r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40012400 	.word	0x40012400
 80006f0:	40021000 	.word	0x40021000

080006f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b08b      	sub	sp, #44	; 0x2c
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	2414      	movs	r4, #20
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	0018      	movs	r0, r3
 8000702:	2314      	movs	r3, #20
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f002 f83a 	bl	8002780 <memset>
  if(hi2c->Instance==I2C1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <HAL_I2C_MspInit+0x90>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d131      	bne.n	800077a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <HAL_I2C_MspInit+0x94>)
 8000718:	695a      	ldr	r2, [r3, #20]
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <HAL_I2C_MspInit+0x94>)
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	02c9      	lsls	r1, r1, #11
 8000720:	430a      	orrs	r2, r1
 8000722:	615a      	str	r2, [r3, #20]
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <HAL_I2C_MspInit+0x94>)
 8000726:	695a      	ldr	r2, [r3, #20]
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	02db      	lsls	r3, r3, #11
 800072c:	4013      	ands	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000732:	0021      	movs	r1, r4
 8000734:	187b      	adds	r3, r7, r1
 8000736:	22c0      	movs	r2, #192	; 0xc0
 8000738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2212      	movs	r2, #18
 800073e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2203      	movs	r2, #3
 800074a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2201      	movs	r2, #1
 8000750:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	187b      	adds	r3, r7, r1
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <HAL_I2C_MspInit+0x98>)
 8000756:	0019      	movs	r1, r3
 8000758:	0010      	movs	r0, r2
 800075a:	f000 fc37 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_I2C_MspInit+0x94>)
 8000760:	69da      	ldr	r2, [r3, #28]
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_I2C_MspInit+0x94>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	0389      	lsls	r1, r1, #14
 8000768:	430a      	orrs	r2, r1
 800076a:	61da      	str	r2, [r3, #28]
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_I2C_MspInit+0x94>)
 800076e:	69da      	ldr	r2, [r3, #28]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	039b      	lsls	r3, r3, #14
 8000774:	4013      	ands	r3, r2
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b00b      	add	sp, #44	; 0x2c
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40005400 	.word	0x40005400
 8000788:	40021000 	.word	0x40021000
 800078c:	48000400 	.word	0x48000400

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b08b      	sub	sp, #44	; 0x2c
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	2414      	movs	r4, #20
 800079a:	193b      	adds	r3, r7, r4
 800079c:	0018      	movs	r0, r3
 800079e:	2314      	movs	r3, #20
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f001 ffec 	bl	8002780 <memset>
  if(huart->Instance==USART1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <HAL_UART_MspInit+0x94>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d133      	bne.n	800081a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <HAL_UART_MspInit+0x98>)
 80007b4:	699a      	ldr	r2, [r3, #24]
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <HAL_UART_MspInit+0x98>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	01c9      	lsls	r1, r1, #7
 80007bc:	430a      	orrs	r2, r1
 80007be:	619a      	str	r2, [r3, #24]
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <HAL_UART_MspInit+0x98>)
 80007c2:	699a      	ldr	r2, [r3, #24]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	01db      	lsls	r3, r3, #7
 80007c8:	4013      	ands	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <HAL_UART_MspInit+0x98>)
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_UART_MspInit+0x98>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	0289      	lsls	r1, r1, #10
 80007d8:	430a      	orrs	r2, r1
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_UART_MspInit+0x98>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	029b      	lsls	r3, r3, #10
 80007e4:	4013      	ands	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	22c0      	movs	r2, #192	; 0xc0
 80007ee:	00d2      	lsls	r2, r2, #3
 80007f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	0021      	movs	r1, r4
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2202      	movs	r2, #2
 80007f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2203      	movs	r2, #3
 8000804:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2201      	movs	r2, #1
 800080a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	187a      	adds	r2, r7, r1
 800080e:	2390      	movs	r3, #144	; 0x90
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	0011      	movs	r1, r2
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fbd9 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b00b      	add	sp, #44	; 0x2c
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	40013800 	.word	0x40013800
 8000828:	40021000 	.word	0x40021000

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <NMI_Handler+0x4>

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f87a 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000866:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000868:	f7ff fff7 	bl	800085a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800086e:	490d      	ldr	r1, [pc, #52]	; (80008a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <LoopForever+0xe>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000884:	4c0a      	ldr	r4, [pc, #40]	; (80008b0 <LoopForever+0x16>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000892:	f001 ff51 	bl	8002738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000896:	f7ff fcc3 	bl	8000220 <main>

0800089a <LoopForever>:

LoopForever:
    b LoopForever
 800089a:	e7fe      	b.n	800089a <LoopForever>
  ldr   r0, =_estack
 800089c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008a8:	080027e8 	.word	0x080027e8
  ldr r2, =_sbss
 80008ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008b0:	2000019c 	.word	0x2000019c

080008b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC1_COMP_IRQHandler>
	...

080008b8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <HAL_Init+0x24>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_Init+0x24>)
 80008c2:	2110      	movs	r1, #16
 80008c4:	430a      	orrs	r2, r1
 80008c6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f000 f809 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ce:	f7ff fea7 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_InitTick+0x5c>)
 80008ea:	681c      	ldr	r4, [r3, #0]
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_InitTick+0x60>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	0019      	movs	r1, r3
 80008f2:	23fa      	movs	r3, #250	; 0xfa
 80008f4:	0098      	lsls	r0, r3, #2
 80008f6:	f7ff fc07 	bl	8000108 <__udivsi3>
 80008fa:	0003      	movs	r3, r0
 80008fc:	0019      	movs	r1, r3
 80008fe:	0020      	movs	r0, r4
 8000900:	f7ff fc02 	bl	8000108 <__udivsi3>
 8000904:	0003      	movs	r3, r0
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fb53 	bl	8000fb2 <HAL_SYSTICK_Config>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	e00f      	b.n	8000934 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d80b      	bhi.n	8000932 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	2301      	movs	r3, #1
 800091e:	425b      	negs	r3, r3
 8000920:	2200      	movs	r2, #0
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fb30 	bl	8000f88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_InitTick+0x64>)
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	b003      	add	sp, #12
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	20000000 	.word	0x20000000
 8000940:	20000008 	.word	0x20000008
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x1c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	001a      	movs	r2, r3
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_IncTick+0x20>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	18d2      	adds	r2, r2, r3
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <HAL_IncTick+0x20>)
 800095a:	601a      	str	r2, [r3, #0]
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000008 	.word	0x20000008
 8000968:	20000198 	.word	0x20000198

0800096c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <HAL_GetTick+0x10>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	20000198 	.word	0x20000198

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff fff0 	bl	800096c <HAL_GetTick>
 800098c:	0003      	movs	r3, r0
 800098e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_Delay+0x44>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	001a      	movs	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	189b      	adds	r3, r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	f7ff ffe0 	bl	800096c <HAL_GetTick>
 80009ac:	0002      	movs	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	b004      	add	sp, #16
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	20000008 	.word	0x20000008

080009c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009d0:	230f      	movs	r3, #15
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e125      	b.n	8000c32 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10a      	bne.n	8000a04 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2234      	movs	r2, #52	; 0x34
 80009f8:	2100      	movs	r1, #0
 80009fa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff fe32 	bl	8000668 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a08:	2210      	movs	r2, #16
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	d000      	beq.n	8000a10 <HAL_ADC_Init+0x48>
 8000a0e:	e103      	b.n	8000c18 <HAL_ADC_Init+0x250>
 8000a10:	230f      	movs	r3, #15
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d000      	beq.n	8000a1c <HAL_ADC_Init+0x54>
 8000a1a:	e0fd      	b.n	8000c18 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	2204      	movs	r2, #4
 8000a24:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000a26:	d000      	beq.n	8000a2a <HAL_ADC_Init+0x62>
 8000a28:	e0f6      	b.n	8000c18 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a2e:	4a83      	ldr	r2, [pc, #524]	; (8000c3c <HAL_ADC_Init+0x274>)
 8000a30:	4013      	ands	r3, r2
 8000a32:	2202      	movs	r2, #2
 8000a34:	431a      	orrs	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	2203      	movs	r2, #3
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d112      	bne.n	8000a6e <HAL_ADC_Init+0xa6>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d009      	beq.n	8000a6a <HAL_ADC_Init+0xa2>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	021b      	lsls	r3, r3, #8
 8000a60:	401a      	ands	r2, r3
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d101      	bne.n	8000a6e <HAL_ADC_Init+0xa6>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <HAL_ADC_Init+0xa8>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d116      	bne.n	8000aa2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	2218      	movs	r2, #24
 8000a7c:	4393      	bics	r3, r2
 8000a7e:	0019      	movs	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	689a      	ldr	r2, [r3, #8]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	0899      	lsrs	r1, r3, #2
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685a      	ldr	r2, [r3, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4964      	ldr	r1, [pc, #400]	; (8000c40 <HAL_ADC_Init+0x278>)
 8000aae:	400a      	ands	r2, r1
 8000ab0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7e1b      	ldrb	r3, [r3, #24]
 8000ab6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7e5b      	ldrb	r3, [r3, #25]
 8000abc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000abe:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	7e9b      	ldrb	r3, [r3, #26]
 8000ac4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ac6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d002      	beq.n	8000ad6 <HAL_ADC_Init+0x10e>
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	015b      	lsls	r3, r3, #5
 8000ad4:	e000      	b.n	8000ad8 <HAL_ADC_Init+0x110>
 8000ad6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ad8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ade:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	691b      	ldr	r3, [r3, #16]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d101      	bne.n	8000aec <HAL_ADC_Init+0x124>
 8000ae8:	2304      	movs	r3, #4
 8000aea:	e000      	b.n	8000aee <HAL_ADC_Init+0x126>
 8000aec:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000aee:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2124      	movs	r1, #36	; 0x24
 8000af4:	5c5b      	ldrb	r3, [r3, r1]
 8000af6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000af8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	7edb      	ldrb	r3, [r3, #27]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d115      	bne.n	8000b34 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7e9b      	ldrb	r3, [r3, #26]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d105      	bne.n	8000b1c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	0252      	lsls	r2, r2, #9
 8000b16:	4313      	orrs	r3, r2
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	e00b      	b.n	8000b34 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b20:	2220      	movs	r2, #32
 8000b22:	431a      	orrs	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69da      	ldr	r2, [r3, #28]
 8000b38:	23c2      	movs	r3, #194	; 0xc2
 8000b3a:	33ff      	adds	r3, #255	; 0xff
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d007      	beq.n	8000b50 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68d9      	ldr	r1, [r3, #12]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	055b      	lsls	r3, r3, #21
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d01b      	beq.n	8000ba4 <HAL_ADC_Init+0x1dc>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d017      	beq.n	8000ba4 <HAL_ADC_Init+0x1dc>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d013      	beq.n	8000ba4 <HAL_ADC_Init+0x1dc>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d00f      	beq.n	8000ba4 <HAL_ADC_Init+0x1dc>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d00b      	beq.n	8000ba4 <HAL_ADC_Init+0x1dc>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b90:	2b05      	cmp	r3, #5
 8000b92:	d007      	beq.n	8000ba4 <HAL_ADC_Init+0x1dc>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b98:	2b06      	cmp	r3, #6
 8000b9a:	d003      	beq.n	8000ba4 <HAL_ADC_Init+0x1dc>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba0:	2b07      	cmp	r3, #7
 8000ba2:	d112      	bne.n	8000bca <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2107      	movs	r1, #7
 8000bb0:	438a      	bics	r2, r1
 8000bb2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6959      	ldr	r1, [r3, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbe:	2207      	movs	r2, #7
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <HAL_ADC_Init+0x27c>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be4:	2203      	movs	r2, #3
 8000be6:	4393      	bics	r3, r2
 8000be8:	2201      	movs	r2, #1
 8000bea:	431a      	orrs	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000bf0:	e01c      	b.n	8000c2c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf6:	2212      	movs	r2, #18
 8000bf8:	4393      	bics	r3, r2
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c06:	2201      	movs	r2, #1
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000c0e:	230f      	movs	r3, #15
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c16:	e009      	b.n	8000c2c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	781b      	ldrb	r3, [r3, #0]
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b004      	add	sp, #16
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	fffffefd 	.word	0xfffffefd
 8000c40:	fffe0219 	.word	0xfffe0219
 8000c44:	833fffe7 	.word	0x833fffe7

08000c48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c52:	230f      	movs	r3, #15
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	055b      	lsls	r3, r3, #21
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d011      	beq.n	8000c8e <HAL_ADC_ConfigChannel+0x46>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d00d      	beq.n	8000c8e <HAL_ADC_ConfigChannel+0x46>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d009      	beq.n	8000c8e <HAL_ADC_ConfigChannel+0x46>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d005      	beq.n	8000c8e <HAL_ADC_ConfigChannel+0x46>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d001      	beq.n	8000c8e <HAL_ADC_ConfigChannel+0x46>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2234      	movs	r2, #52	; 0x34
 8000c92:	5c9b      	ldrb	r3, [r3, r2]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d101      	bne.n	8000c9c <HAL_ADC_ConfigChannel+0x54>
 8000c98:	2302      	movs	r3, #2
 8000c9a:	e0d0      	b.n	8000e3e <HAL_ADC_ConfigChannel+0x1f6>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2234      	movs	r2, #52	; 0x34
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	2204      	movs	r2, #4
 8000cac:	4013      	ands	r3, r2
 8000cae:	d000      	beq.n	8000cb2 <HAL_ADC_ConfigChannel+0x6a>
 8000cb0:	e0b4      	b.n	8000e1c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	4a64      	ldr	r2, [pc, #400]	; (8000e48 <HAL_ADC_ConfigChannel+0x200>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d100      	bne.n	8000cbe <HAL_ADC_ConfigChannel+0x76>
 8000cbc:	e082      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	055b      	lsls	r3, r3, #21
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d037      	beq.n	8000d50 <HAL_ADC_ConfigChannel+0x108>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d033      	beq.n	8000d50 <HAL_ADC_ConfigChannel+0x108>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d02f      	beq.n	8000d50 <HAL_ADC_ConfigChannel+0x108>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d02b      	beq.n	8000d50 <HAL_ADC_ConfigChannel+0x108>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d027      	beq.n	8000d50 <HAL_ADC_ConfigChannel+0x108>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d04:	2b05      	cmp	r3, #5
 8000d06:	d023      	beq.n	8000d50 <HAL_ADC_ConfigChannel+0x108>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0c:	2b06      	cmp	r3, #6
 8000d0e:	d01f      	beq.n	8000d50 <HAL_ADC_ConfigChannel+0x108>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d14:	2b07      	cmp	r3, #7
 8000d16:	d01b      	beq.n	8000d50 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	2107      	movs	r1, #7
 8000d24:	400b      	ands	r3, r1
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d012      	beq.n	8000d50 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	695a      	ldr	r2, [r3, #20]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2107      	movs	r1, #7
 8000d36:	438a      	bics	r2, r1
 8000d38:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6959      	ldr	r1, [r3, #20]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	2207      	movs	r2, #7
 8000d46:	401a      	ands	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b10      	cmp	r3, #16
 8000d56:	d007      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x120>
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b11      	cmp	r3, #17
 8000d5e:	d003      	beq.n	8000d68 <HAL_ADC_ConfigChannel+0x120>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b12      	cmp	r3, #18
 8000d66:	d163      	bne.n	8000e30 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000d68:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <HAL_ADC_ConfigChannel+0x204>)
 8000d6a:	6819      	ldr	r1, [r3, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b10      	cmp	r3, #16
 8000d72:	d009      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x140>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b11      	cmp	r3, #17
 8000d7a:	d102      	bne.n	8000d82 <HAL_ADC_ConfigChannel+0x13a>
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	03db      	lsls	r3, r3, #15
 8000d80:	e004      	b.n	8000d8c <HAL_ADC_ConfigChannel+0x144>
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	045b      	lsls	r3, r3, #17
 8000d86:	e001      	b.n	8000d8c <HAL_ADC_ConfigChannel+0x144>
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	4a2f      	ldr	r2, [pc, #188]	; (8000e4c <HAL_ADC_ConfigChannel+0x204>)
 8000d8e:	430b      	orrs	r3, r1
 8000d90:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b10      	cmp	r3, #16
 8000d98:	d14a      	bne.n	8000e30 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <HAL_ADC_ConfigChannel+0x208>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	492d      	ldr	r1, [pc, #180]	; (8000e54 <HAL_ADC_ConfigChannel+0x20c>)
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff f9b1 	bl	8000108 <__udivsi3>
 8000da6:	0003      	movs	r3, r0
 8000da8:	001a      	movs	r2, r3
 8000daa:	0013      	movs	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	189b      	adds	r3, r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000db4:	e002      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f9      	bne.n	8000db6 <HAL_ADC_ConfigChannel+0x16e>
 8000dc2:	e035      	b.n	8000e30 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4099      	lsls	r1, r3
 8000dd2:	000b      	movs	r3, r1
 8000dd4:	43d9      	mvns	r1, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	400a      	ands	r2, r1
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b10      	cmp	r3, #16
 8000de4:	d007      	beq.n	8000df6 <HAL_ADC_ConfigChannel+0x1ae>
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b11      	cmp	r3, #17
 8000dec:	d003      	beq.n	8000df6 <HAL_ADC_ConfigChannel+0x1ae>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d11c      	bne.n	8000e30 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_ADC_ConfigChannel+0x204>)
 8000df8:	6819      	ldr	r1, [r3, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b10      	cmp	r3, #16
 8000e00:	d007      	beq.n	8000e12 <HAL_ADC_ConfigChannel+0x1ca>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b11      	cmp	r3, #17
 8000e08:	d101      	bne.n	8000e0e <HAL_ADC_ConfigChannel+0x1c6>
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_ADC_ConfigChannel+0x210>)
 8000e0c:	e002      	b.n	8000e14 <HAL_ADC_ConfigChannel+0x1cc>
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_ADC_ConfigChannel+0x214>)
 8000e10:	e000      	b.n	8000e14 <HAL_ADC_ConfigChannel+0x1cc>
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_ADC_ConfigChannel+0x218>)
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_ADC_ConfigChannel+0x204>)
 8000e16:	400b      	ands	r3, r1
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e009      	b.n	8000e30 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e20:	2220      	movs	r2, #32
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000e28:	230f      	movs	r3, #15
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2234      	movs	r2, #52	; 0x34
 8000e34:	2100      	movs	r1, #0
 8000e36:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e38:	230f      	movs	r3, #15
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	781b      	ldrb	r3, [r3, #0]
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	00001001 	.word	0x00001001
 8000e4c:	40012708 	.word	0x40012708
 8000e50:	20000000 	.word	0x20000000
 8000e54:	000f4240 	.word	0x000f4240
 8000e58:	ffbfffff 	.word	0xffbfffff
 8000e5c:	feffffff 	.word	0xfeffffff
 8000e60:	ff7fffff 	.word	0xff7fffff

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b7f      	cmp	r3, #127	; 0x7f
 8000e78:	d828      	bhi.n	8000ecc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	; (8000f38 <__NVIC_SetPriority+0xd4>)
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	33c0      	adds	r3, #192	; 0xc0
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	589b      	ldr	r3, [r3, r2]
 8000e8a:	1dfa      	adds	r2, r7, #7
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	0011      	movs	r1, r2
 8000e90:	2203      	movs	r2, #3
 8000e92:	400a      	ands	r2, r1
 8000e94:	00d2      	lsls	r2, r2, #3
 8000e96:	21ff      	movs	r1, #255	; 0xff
 8000e98:	4091      	lsls	r1, r2
 8000e9a:	000a      	movs	r2, r1
 8000e9c:	43d2      	mvns	r2, r2
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	019b      	lsls	r3, r3, #6
 8000ea6:	22ff      	movs	r2, #255	; 0xff
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	0018      	movs	r0, r3
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	4003      	ands	r3, r0
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb8:	481f      	ldr	r0, [pc, #124]	; (8000f38 <__NVIC_SetPriority+0xd4>)
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	33c0      	adds	r3, #192	; 0xc0
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eca:	e031      	b.n	8000f30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <__NVIC_SetPriority+0xd8>)
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	3b08      	subs	r3, #8
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3306      	adds	r3, #6
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	18d3      	adds	r3, r2, r3
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	1dfa      	adds	r2, r7, #7
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	0011      	movs	r1, r2
 8000eec:	2203      	movs	r2, #3
 8000eee:	400a      	ands	r2, r1
 8000ef0:	00d2      	lsls	r2, r2, #3
 8000ef2:	21ff      	movs	r1, #255	; 0xff
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	43d2      	mvns	r2, r2
 8000efa:	401a      	ands	r2, r3
 8000efc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	019b      	lsls	r3, r3, #6
 8000f02:	22ff      	movs	r2, #255	; 0xff
 8000f04:	401a      	ands	r2, r3
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	4003      	ands	r3, r0
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <__NVIC_SetPriority+0xd8>)
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	001c      	movs	r4, r3
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	4023      	ands	r3, r4
 8000f20:	3b08      	subs	r3, #8
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	430a      	orrs	r2, r1
 8000f26:	3306      	adds	r3, #6
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	18c3      	adds	r3, r0, r3
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	601a      	str	r2, [r3, #0]
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b003      	add	sp, #12
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	1e5a      	subs	r2, r3, #1
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	045b      	lsls	r3, r3, #17
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d301      	bcc.n	8000f58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f54:	2301      	movs	r3, #1
 8000f56:	e010      	b.n	8000f7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <SysTick_Config+0x44>)
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	3a01      	subs	r2, #1
 8000f5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f60:	2301      	movs	r3, #1
 8000f62:	425b      	negs	r3, r3
 8000f64:	2103      	movs	r1, #3
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff ff7c 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x44>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x44>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	210f      	movs	r1, #15
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	1c02      	adds	r2, r0, #0
 8000f98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b004      	add	sp, #16
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff ffbf 	bl	8000f40 <SysTick_Config>
 8000fc2:	0003      	movs	r3, r0
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fda:	e14f      	b.n	800127c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4091      	lsls	r1, r2
 8000fe6:	000a      	movs	r2, r1
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d100      	bne.n	8000ff4 <HAL_GPIO_Init+0x28>
 8000ff2:	e140      	b.n	8001276 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d005      	beq.n	800100c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2203      	movs	r2, #3
 8001006:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001008:	2b02      	cmp	r3, #2
 800100a:	d130      	bne.n	800106e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	409a      	lsls	r2, r3
 800101a:	0013      	movs	r3, r2
 800101c:	43da      	mvns	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	409a      	lsls	r2, r3
 800102e:	0013      	movs	r3, r2
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001042:	2201      	movs	r2, #1
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	43da      	mvns	r2, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	2201      	movs	r2, #1
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2203      	movs	r2, #3
 8001074:	4013      	ands	r3, r2
 8001076:	2b03      	cmp	r3, #3
 8001078:	d017      	beq.n	80010aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	43da      	mvns	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2203      	movs	r2, #3
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d123      	bne.n	80010fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	58d3      	ldr	r3, [r2, r3]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2207      	movs	r2, #7
 80010c8:	4013      	ands	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	43da      	mvns	r2, r3
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	2107      	movs	r1, #7
 80010e2:	400b      	ands	r3, r1
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	409a      	lsls	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	6939      	ldr	r1, [r7, #16]
 80010fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	43da      	mvns	r2, r3
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	401a      	ands	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	23c0      	movs	r3, #192	; 0xc0
 8001138:	029b      	lsls	r3, r3, #10
 800113a:	4013      	ands	r3, r2
 800113c:	d100      	bne.n	8001140 <HAL_GPIO_Init+0x174>
 800113e:	e09a      	b.n	8001276 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001140:	4b54      	ldr	r3, [pc, #336]	; (8001294 <HAL_GPIO_Init+0x2c8>)
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_GPIO_Init+0x2c8>)
 8001146:	2101      	movs	r1, #1
 8001148:	430a      	orrs	r2, r1
 800114a:	619a      	str	r2, [r3, #24]
 800114c:	4b51      	ldr	r3, [pc, #324]	; (8001294 <HAL_GPIO_Init+0x2c8>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	2201      	movs	r2, #1
 8001152:	4013      	ands	r3, r2
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001158:	4a4f      	ldr	r2, [pc, #316]	; (8001298 <HAL_GPIO_Init+0x2cc>)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3302      	adds	r3, #2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	589b      	ldr	r3, [r3, r2]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2203      	movs	r2, #3
 800116a:	4013      	ands	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	409a      	lsls	r2, r3
 8001172:	0013      	movs	r3, r2
 8001174:	43da      	mvns	r2, r3
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	2390      	movs	r3, #144	; 0x90
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	429a      	cmp	r2, r3
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x1e2>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a44      	ldr	r2, [pc, #272]	; (800129c <HAL_GPIO_Init+0x2d0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x1de>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a43      	ldr	r2, [pc, #268]	; (80012a0 <HAL_GPIO_Init+0x2d4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x1da>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a42      	ldr	r2, [pc, #264]	; (80012a4 <HAL_GPIO_Init+0x2d8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x1d6>
 800119e:	2303      	movs	r3, #3
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x1e4>
 80011a2:	2305      	movs	r3, #5
 80011a4:	e004      	b.n	80011b0 <HAL_GPIO_Init+0x1e4>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_Init+0x1e4>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x1e4>
 80011ae:	2300      	movs	r3, #0
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	2103      	movs	r1, #3
 80011b4:	400a      	ands	r2, r1
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4093      	lsls	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c0:	4935      	ldr	r1, [pc, #212]	; (8001298 <HAL_GPIO_Init+0x2cc>)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <HAL_GPIO_Init+0x2dc>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	035b      	lsls	r3, r3, #13
 80011e6:	4013      	ands	r3, r2
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_GPIO_Init+0x2dc>)
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <HAL_GPIO_Init+0x2dc>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43da      	mvns	r2, r3
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	039b      	lsls	r3, r3, #14
 8001210:	4013      	ands	r3, r2
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <HAL_GPIO_Init+0x2dc>)
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <HAL_GPIO_Init+0x2dc>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43da      	mvns	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	029b      	lsls	r3, r3, #10
 800123a:	4013      	ands	r3, r2
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_GPIO_Init+0x2dc>)
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_GPIO_Init+0x2dc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43da      	mvns	r2, r3
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	025b      	lsls	r3, r3, #9
 8001264:	4013      	ands	r3, r2
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_GPIO_Init+0x2dc>)
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	40da      	lsrs	r2, r3
 8001284:	1e13      	subs	r3, r2, #0
 8001286:	d000      	beq.n	800128a <HAL_GPIO_Init+0x2be>
 8001288:	e6a8      	b.n	8000fdc <HAL_GPIO_Init+0x10>
  } 
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b006      	add	sp, #24
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	40010000 	.word	0x40010000
 800129c:	48000400 	.word	0x48000400
 80012a0:	48000800 	.word	0x48000800
 80012a4:	48000c00 	.word	0x48000c00
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	0008      	movs	r0, r1
 80012b6:	0011      	movs	r1, r2
 80012b8:	1cbb      	adds	r3, r7, #2
 80012ba:	1c02      	adds	r2, r0, #0
 80012bc:	801a      	strh	r2, [r3, #0]
 80012be:	1c7b      	adds	r3, r7, #1
 80012c0:	1c0a      	adds	r2, r1, #0
 80012c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c4:	1c7b      	adds	r3, r7, #1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012cc:	1cbb      	adds	r3, r7, #2
 80012ce:	881a      	ldrh	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d4:	e003      	b.n	80012de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d6:	1cbb      	adds	r3, r7, #2
 80012d8:	881a      	ldrh	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e082      	b.n	8001400 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2241      	movs	r2, #65	; 0x41
 80012fe:	5c9b      	ldrb	r3, [r3, r2]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d107      	bne.n	8001316 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2240      	movs	r2, #64	; 0x40
 800130a:	2100      	movs	r1, #0
 800130c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff f9ef 	bl	80006f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2241      	movs	r2, #65	; 0x41
 800131a:	2124      	movs	r1, #36	; 0x24
 800131c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2101      	movs	r1, #1
 800132a:	438a      	bics	r2, r1
 800132c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4934      	ldr	r1, [pc, #208]	; (8001408 <HAL_I2C_Init+0x120>)
 8001338:	400a      	ands	r2, r1
 800133a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4931      	ldr	r1, [pc, #196]	; (800140c <HAL_I2C_Init+0x124>)
 8001348:	400a      	ands	r2, r1
 800134a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d108      	bne.n	8001366 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	0209      	lsls	r1, r1, #8
 8001360:	430a      	orrs	r2, r1
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	e007      	b.n	8001376 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2184      	movs	r1, #132	; 0x84
 8001370:	0209      	lsls	r1, r1, #8
 8001372:	430a      	orrs	r2, r1
 8001374:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d104      	bne.n	8001388 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	491f      	ldr	r1, [pc, #124]	; (8001410 <HAL_I2C_Init+0x128>)
 8001394:	430a      	orrs	r2, r1
 8001396:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	491a      	ldr	r1, [pc, #104]	; (800140c <HAL_I2C_Init+0x124>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69d9      	ldr	r1, [r3, #28]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2241      	movs	r2, #65	; 0x41
 80013ec:	2120      	movs	r1, #32
 80013ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2242      	movs	r2, #66	; 0x42
 80013fa:	2100      	movs	r1, #0
 80013fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}
 8001408:	f0ffffff 	.word	0xf0ffffff
 800140c:	ffff7fff 	.word	0xffff7fff
 8001410:	02008000 	.word	0x02008000

08001414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2241      	movs	r2, #65	; 0x41
 8001422:	5c9b      	ldrb	r3, [r3, r2]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b20      	cmp	r3, #32
 8001428:	d138      	bne.n	800149c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2240      	movs	r2, #64	; 0x40
 800142e:	5c9b      	ldrb	r3, [r3, r2]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001434:	2302      	movs	r3, #2
 8001436:	e032      	b.n	800149e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2240      	movs	r2, #64	; 0x40
 800143c:	2101      	movs	r1, #1
 800143e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2241      	movs	r2, #65	; 0x41
 8001444:	2124      	movs	r1, #36	; 0x24
 8001446:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2101      	movs	r1, #1
 8001454:	438a      	bics	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4911      	ldr	r1, [pc, #68]	; (80014a8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001464:	400a      	ands	r2, r1
 8001466:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6819      	ldr	r1, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2101      	movs	r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2241      	movs	r2, #65	; 0x41
 800148c:	2120      	movs	r1, #32
 800148e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2240      	movs	r2, #64	; 0x40
 8001494:	2100      	movs	r1, #0
 8001496:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	e000      	b.n	800149e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800149c:	2302      	movs	r3, #2
  }
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b002      	add	sp, #8
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	ffffefff 	.word	0xffffefff

080014ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2241      	movs	r2, #65	; 0x41
 80014ba:	5c9b      	ldrb	r3, [r3, r2]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b20      	cmp	r3, #32
 80014c0:	d139      	bne.n	8001536 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2240      	movs	r2, #64	; 0x40
 80014c6:	5c9b      	ldrb	r3, [r3, r2]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e033      	b.n	8001538 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2240      	movs	r2, #64	; 0x40
 80014d4:	2101      	movs	r1, #1
 80014d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2241      	movs	r2, #65	; 0x41
 80014dc:	2124      	movs	r1, #36	; 0x24
 80014de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2101      	movs	r1, #1
 80014ec:	438a      	bics	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4a11      	ldr	r2, [pc, #68]	; (8001540 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2241      	movs	r2, #65	; 0x41
 8001526:	2120      	movs	r1, #32
 8001528:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2240      	movs	r2, #64	; 0x40
 800152e:	2100      	movs	r1, #0
 8001530:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001536:	2302      	movs	r3, #2
  }
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b004      	add	sp, #16
 800153e:	bd80      	pop	{r7, pc}
 8001540:	fffff0ff 	.word	0xfffff0ff

08001544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e301      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2201      	movs	r2, #1
 800155c:	4013      	ands	r3, r2
 800155e:	d100      	bne.n	8001562 <HAL_RCC_OscConfig+0x1e>
 8001560:	e08d      	b.n	800167e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001562:	4bc3      	ldr	r3, [pc, #780]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	220c      	movs	r2, #12
 8001568:	4013      	ands	r3, r2
 800156a:	2b04      	cmp	r3, #4
 800156c:	d00e      	beq.n	800158c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800156e:	4bc0      	ldr	r3, [pc, #768]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	220c      	movs	r2, #12
 8001574:	4013      	ands	r3, r2
 8001576:	2b08      	cmp	r3, #8
 8001578:	d116      	bne.n	80015a8 <HAL_RCC_OscConfig+0x64>
 800157a:	4bbd      	ldr	r3, [pc, #756]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	025b      	lsls	r3, r3, #9
 8001582:	401a      	ands	r2, r3
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	025b      	lsls	r3, r3, #9
 8001588:	429a      	cmp	r2, r3
 800158a:	d10d      	bne.n	80015a8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	4bb8      	ldr	r3, [pc, #736]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	029b      	lsls	r3, r3, #10
 8001594:	4013      	ands	r3, r2
 8001596:	d100      	bne.n	800159a <HAL_RCC_OscConfig+0x56>
 8001598:	e070      	b.n	800167c <HAL_RCC_OscConfig+0x138>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d000      	beq.n	80015a4 <HAL_RCC_OscConfig+0x60>
 80015a2:	e06b      	b.n	800167c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e2d8      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d107      	bne.n	80015c0 <HAL_RCC_OscConfig+0x7c>
 80015b0:	4baf      	ldr	r3, [pc, #700]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4bae      	ldr	r3, [pc, #696]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	0249      	lsls	r1, r1, #9
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	e02f      	b.n	8001620 <HAL_RCC_OscConfig+0xdc>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10c      	bne.n	80015e2 <HAL_RCC_OscConfig+0x9e>
 80015c8:	4ba9      	ldr	r3, [pc, #676]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4ba8      	ldr	r3, [pc, #672]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	49a9      	ldr	r1, [pc, #676]	; (8001874 <HAL_RCC_OscConfig+0x330>)
 80015d0:	400a      	ands	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	4ba6      	ldr	r3, [pc, #664]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4ba5      	ldr	r3, [pc, #660]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80015da:	49a7      	ldr	r1, [pc, #668]	; (8001878 <HAL_RCC_OscConfig+0x334>)
 80015dc:	400a      	ands	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e01e      	b.n	8001620 <HAL_RCC_OscConfig+0xdc>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d10e      	bne.n	8001608 <HAL_RCC_OscConfig+0xc4>
 80015ea:	4ba1      	ldr	r3, [pc, #644]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4ba0      	ldr	r3, [pc, #640]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80015f0:	2180      	movs	r1, #128	; 0x80
 80015f2:	02c9      	lsls	r1, r1, #11
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	4b9d      	ldr	r3, [pc, #628]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b9c      	ldr	r3, [pc, #624]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	0249      	lsls	r1, r1, #9
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0xdc>
 8001608:	4b99      	ldr	r3, [pc, #612]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b98      	ldr	r3, [pc, #608]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 800160e:	4999      	ldr	r1, [pc, #612]	; (8001874 <HAL_RCC_OscConfig+0x330>)
 8001610:	400a      	ands	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	4b96      	ldr	r3, [pc, #600]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b95      	ldr	r3, [pc, #596]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 800161a:	4997      	ldr	r1, [pc, #604]	; (8001878 <HAL_RCC_OscConfig+0x334>)
 800161c:	400a      	ands	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d014      	beq.n	8001652 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff f9a0 	bl	800096c <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001632:	f7ff f99b 	bl	800096c <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b64      	cmp	r3, #100	; 0x64
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e28a      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001644:	4b8a      	ldr	r3, [pc, #552]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	4013      	ands	r3, r2
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0xee>
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff f98b 	bl	800096c <HAL_GetTick>
 8001656:	0003      	movs	r3, r0
 8001658:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff f986 	bl	800096c <HAL_GetTick>
 8001660:	0002      	movs	r2, r0
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e275      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	4b80      	ldr	r3, [pc, #512]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	029b      	lsls	r3, r3, #10
 8001676:	4013      	ands	r3, r2
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x118>
 800167a:	e000      	b.n	800167e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2202      	movs	r2, #2
 8001684:	4013      	ands	r3, r2
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0x146>
 8001688:	e069      	b.n	800175e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800168a:	4b79      	ldr	r3, [pc, #484]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	220c      	movs	r2, #12
 8001690:	4013      	ands	r3, r2
 8001692:	d00b      	beq.n	80016ac <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001694:	4b76      	ldr	r3, [pc, #472]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	220c      	movs	r2, #12
 800169a:	4013      	ands	r3, r2
 800169c:	2b08      	cmp	r3, #8
 800169e:	d11c      	bne.n	80016da <HAL_RCC_OscConfig+0x196>
 80016a0:	4b73      	ldr	r3, [pc, #460]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	025b      	lsls	r3, r3, #9
 80016a8:	4013      	ands	r3, r2
 80016aa:	d116      	bne.n	80016da <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ac:	4b70      	ldr	r3, [pc, #448]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2202      	movs	r2, #2
 80016b2:	4013      	ands	r3, r2
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x17e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e24b      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b6b      	ldr	r3, [pc, #428]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	22f8      	movs	r2, #248	; 0xf8
 80016c8:	4393      	bics	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	00da      	lsls	r2, r3, #3
 80016d2:	4b67      	ldr	r3, [pc, #412]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d8:	e041      	b.n	800175e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d024      	beq.n	800172c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e2:	4b63      	ldr	r3, [pc, #396]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b62      	ldr	r3, [pc, #392]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80016e8:	2101      	movs	r1, #1
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff f93d 	bl	800096c <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f8:	f7ff f938 	bl	800096c <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e227      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	4b59      	ldr	r3, [pc, #356]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2202      	movs	r2, #2
 8001710:	4013      	ands	r3, r2
 8001712:	d0f1      	beq.n	80016f8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b56      	ldr	r3, [pc, #344]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	22f8      	movs	r2, #248	; 0xf8
 800171a:	4393      	bics	r3, r2
 800171c:	0019      	movs	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00da      	lsls	r2, r3, #3
 8001724:	4b52      	ldr	r3, [pc, #328]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e018      	b.n	800175e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b4f      	ldr	r3, [pc, #316]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001732:	2101      	movs	r1, #1
 8001734:	438a      	bics	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff f918 	bl	800096c <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001742:	f7ff f913 	bl	800096c <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e202      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001754:	4b46      	ldr	r3, [pc, #280]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d1f1      	bne.n	8001742 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2208      	movs	r2, #8
 8001764:	4013      	ands	r3, r2
 8001766:	d036      	beq.n	80017d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d019      	beq.n	80017a4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001770:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001774:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001776:	2101      	movs	r1, #1
 8001778:	430a      	orrs	r2, r1
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff f8f6 	bl	800096c <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001786:	f7ff f8f1 	bl	800096c <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e1e0      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	2202      	movs	r2, #2
 800179e:	4013      	ands	r3, r2
 80017a0:	d0f1      	beq.n	8001786 <HAL_RCC_OscConfig+0x242>
 80017a2:	e018      	b.n	80017d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80017a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a8:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	438a      	bics	r2, r1
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff f8dc 	bl	800096c <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ba:	f7ff f8d7 	bl	800096c <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e1c6      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	4b28      	ldr	r3, [pc, #160]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d1f1      	bne.n	80017ba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2204      	movs	r2, #4
 80017dc:	4013      	ands	r3, r2
 80017de:	d100      	bne.n	80017e2 <HAL_RCC_OscConfig+0x29e>
 80017e0:	e0b4      	b.n	800194c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	201f      	movs	r0, #31
 80017e4:	183b      	adds	r3, r7, r0
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	055b      	lsls	r3, r3, #21
 80017f2:	4013      	ands	r3, r2
 80017f4:	d110      	bne.n	8001818 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0549      	lsls	r1, r1, #21
 8001800:	430a      	orrs	r2, r1
 8001802:	61da      	str	r2, [r3, #28]
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001806:	69da      	ldr	r2, [r3, #28]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	055b      	lsls	r3, r3, #21
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001812:	183b      	adds	r3, r7, r0
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_RCC_OscConfig+0x338>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4013      	ands	r3, r2
 8001822:	d11a      	bne.n	800185a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_RCC_OscConfig+0x338>)
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	0049      	lsls	r1, r1, #1
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff f89b 	bl	800096c <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183c:	f7ff f896 	bl	800096c <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b64      	cmp	r3, #100	; 0x64
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e185      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_OscConfig+0x338>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4013      	ands	r3, r2
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10e      	bne.n	8001880 <HAL_RCC_OscConfig+0x33c>
 8001862:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001864:	6a1a      	ldr	r2, [r3, #32]
 8001866:	4b02      	ldr	r3, [pc, #8]	; (8001870 <HAL_RCC_OscConfig+0x32c>)
 8001868:	2101      	movs	r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	621a      	str	r2, [r3, #32]
 800186e:	e035      	b.n	80018dc <HAL_RCC_OscConfig+0x398>
 8001870:	40021000 	.word	0x40021000
 8001874:	fffeffff 	.word	0xfffeffff
 8001878:	fffbffff 	.word	0xfffbffff
 800187c:	40007000 	.word	0x40007000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10c      	bne.n	80018a2 <HAL_RCC_OscConfig+0x35e>
 8001888:	4bb6      	ldr	r3, [pc, #728]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 800188a:	6a1a      	ldr	r2, [r3, #32]
 800188c:	4bb5      	ldr	r3, [pc, #724]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 800188e:	2101      	movs	r1, #1
 8001890:	438a      	bics	r2, r1
 8001892:	621a      	str	r2, [r3, #32]
 8001894:	4bb3      	ldr	r3, [pc, #716]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001896:	6a1a      	ldr	r2, [r3, #32]
 8001898:	4bb2      	ldr	r3, [pc, #712]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 800189a:	2104      	movs	r1, #4
 800189c:	438a      	bics	r2, r1
 800189e:	621a      	str	r2, [r3, #32]
 80018a0:	e01c      	b.n	80018dc <HAL_RCC_OscConfig+0x398>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x380>
 80018aa:	4bae      	ldr	r3, [pc, #696]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80018ac:	6a1a      	ldr	r2, [r3, #32]
 80018ae:	4bad      	ldr	r3, [pc, #692]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80018b0:	2104      	movs	r1, #4
 80018b2:	430a      	orrs	r2, r1
 80018b4:	621a      	str	r2, [r3, #32]
 80018b6:	4bab      	ldr	r3, [pc, #684]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	4baa      	ldr	r3, [pc, #680]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80018bc:	2101      	movs	r1, #1
 80018be:	430a      	orrs	r2, r1
 80018c0:	621a      	str	r2, [r3, #32]
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0x398>
 80018c4:	4ba7      	ldr	r3, [pc, #668]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	4ba6      	ldr	r3, [pc, #664]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80018ca:	2101      	movs	r1, #1
 80018cc:	438a      	bics	r2, r1
 80018ce:	621a      	str	r2, [r3, #32]
 80018d0:	4ba4      	ldr	r3, [pc, #656]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80018d2:	6a1a      	ldr	r2, [r3, #32]
 80018d4:	4ba3      	ldr	r3, [pc, #652]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80018d6:	2104      	movs	r1, #4
 80018d8:	438a      	bics	r2, r1
 80018da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d014      	beq.n	800190e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff f842 	bl	800096c <HAL_GetTick>
 80018e8:	0003      	movs	r3, r0
 80018ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	e009      	b.n	8001902 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff f83d 	bl	800096c <HAL_GetTick>
 80018f2:	0002      	movs	r2, r0
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	4a9b      	ldr	r2, [pc, #620]	; (8001b68 <HAL_RCC_OscConfig+0x624>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e12b      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	4b98      	ldr	r3, [pc, #608]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	2202      	movs	r2, #2
 8001908:	4013      	ands	r3, r2
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x3aa>
 800190c:	e013      	b.n	8001936 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7ff f82d 	bl	800096c <HAL_GetTick>
 8001912:	0003      	movs	r3, r0
 8001914:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001916:	e009      	b.n	800192c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff f828 	bl	800096c <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	4a91      	ldr	r2, [pc, #580]	; (8001b68 <HAL_RCC_OscConfig+0x624>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e116      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192c:	4b8d      	ldr	r3, [pc, #564]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	2202      	movs	r2, #2
 8001932:	4013      	ands	r3, r2
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001936:	231f      	movs	r3, #31
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4b88      	ldr	r3, [pc, #544]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	4b87      	ldr	r3, [pc, #540]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001946:	4989      	ldr	r1, [pc, #548]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001948:	400a      	ands	r2, r1
 800194a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2210      	movs	r2, #16
 8001952:	4013      	ands	r3, r2
 8001954:	d063      	beq.n	8001a1e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d12a      	bne.n	80019b4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800195e:	4b81      	ldr	r3, [pc, #516]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001962:	4b80      	ldr	r3, [pc, #512]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001964:	2104      	movs	r1, #4
 8001966:	430a      	orrs	r2, r1
 8001968:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800196a:	4b7e      	ldr	r3, [pc, #504]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 800196c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196e:	4b7d      	ldr	r3, [pc, #500]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001970:	2101      	movs	r1, #1
 8001972:	430a      	orrs	r2, r1
 8001974:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001976:	f7fe fff9 	bl	800096c <HAL_GetTick>
 800197a:	0003      	movs	r3, r0
 800197c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001980:	f7fe fff4 	bl	800096c <HAL_GetTick>
 8001984:	0002      	movs	r2, r0
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0e3      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001992:	4b74      	ldr	r3, [pc, #464]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d0f1      	beq.n	8001980 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800199c:	4b71      	ldr	r3, [pc, #452]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 800199e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a0:	22f8      	movs	r2, #248	; 0xf8
 80019a2:	4393      	bics	r3, r2
 80019a4:	0019      	movs	r1, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	00da      	lsls	r2, r3, #3
 80019ac:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80019ae:	430a      	orrs	r2, r1
 80019b0:	635a      	str	r2, [r3, #52]	; 0x34
 80019b2:	e034      	b.n	8001a1e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	3305      	adds	r3, #5
 80019ba:	d111      	bne.n	80019e0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019bc:	4b69      	ldr	r3, [pc, #420]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80019be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c0:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80019c2:	2104      	movs	r1, #4
 80019c4:	438a      	bics	r2, r1
 80019c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019c8:	4b66      	ldr	r3, [pc, #408]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80019ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019cc:	22f8      	movs	r2, #248	; 0xf8
 80019ce:	4393      	bics	r3, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	00da      	lsls	r2, r3, #3
 80019d8:	4b62      	ldr	r3, [pc, #392]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80019da:	430a      	orrs	r2, r1
 80019dc:	635a      	str	r2, [r3, #52]	; 0x34
 80019de:	e01e      	b.n	8001a1e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019e0:	4b60      	ldr	r3, [pc, #384]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80019e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e4:	4b5f      	ldr	r3, [pc, #380]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80019e6:	2104      	movs	r1, #4
 80019e8:	430a      	orrs	r2, r1
 80019ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019ec:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80019ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f0:	4b5c      	ldr	r3, [pc, #368]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	438a      	bics	r2, r1
 80019f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7fe ffb8 	bl	800096c <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a02:	f7fe ffb3 	bl	800096c <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e0a2      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	2202      	movs	r2, #2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d1f1      	bne.n	8001a02 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d100      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4e4>
 8001a26:	e097      	b.n	8001b58 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a28:	4b4e      	ldr	r3, [pc, #312]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	220c      	movs	r2, #12
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d100      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4f2>
 8001a34:	e06b      	b.n	8001b0e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d14c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b48      	ldr	r3, [pc, #288]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001a44:	494a      	ldr	r1, [pc, #296]	; (8001b70 <HAL_RCC_OscConfig+0x62c>)
 8001a46:	400a      	ands	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7fe ff8f 	bl	800096c <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a54:	f7fe ff8a 	bl	800096c <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e079      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	049b      	lsls	r3, r3, #18
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a72:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	220f      	movs	r2, #15
 8001a78:	4393      	bics	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a80:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001a82:	430a      	orrs	r2, r1
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a3a      	ldr	r2, [pc, #232]	; (8001b74 <HAL_RCC_OscConfig+0x630>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001aa6:	2180      	movs	r1, #128	; 0x80
 8001aa8:	0449      	lsls	r1, r1, #17
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7fe ff5d 	bl	800096c <HAL_GetTick>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7fe ff58 	bl	800096c <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e047      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	049b      	lsls	r3, r3, #18
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x574>
 8001ad6:	e03f      	b.n	8001b58 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001ade:	4924      	ldr	r1, [pc, #144]	; (8001b70 <HAL_RCC_OscConfig+0x62c>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7fe ff42 	bl	800096c <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7fe ff3d 	bl	800096c <HAL_GetTick>
 8001af2:	0002      	movs	r2, r0
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e02c      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	049b      	lsls	r3, r3, #18
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x5aa>
 8001b0c:	e024      	b.n	8001b58 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e01f      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_RCC_OscConfig+0x620>)
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	025b      	lsls	r3, r3, #9
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d10e      	bne.n	8001b54 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	220f      	movs	r2, #15
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	23f0      	movs	r3, #240	; 0xf0
 8001b48:	039b      	lsls	r3, r3, #14
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b008      	add	sp, #32
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	40021000 	.word	0x40021000
 8001b68:	00001388 	.word	0x00001388
 8001b6c:	efffffff 	.word	0xefffffff
 8001b70:	feffffff 	.word	0xfeffffff
 8001b74:	ffc2ffff 	.word	0xffc2ffff

08001b78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b3      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b5b      	ldr	r3, [pc, #364]	; (8001cfc <HAL_RCC_ClockConfig+0x184>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2201      	movs	r2, #1
 8001b92:	4013      	ands	r3, r2
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d911      	bls.n	8001bbe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b58      	ldr	r3, [pc, #352]	; (8001cfc <HAL_RCC_ClockConfig+0x184>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4393      	bics	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	4b55      	ldr	r3, [pc, #340]	; (8001cfc <HAL_RCC_ClockConfig+0x184>)
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bac:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_RCC_ClockConfig+0x184>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e09a      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d015      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2204      	movs	r2, #4
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d006      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bd2:	4b4b      	ldr	r3, [pc, #300]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001bd8:	21e0      	movs	r1, #224	; 0xe0
 8001bda:	00c9      	lsls	r1, r1, #3
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be0:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	22f0      	movs	r2, #240	; 0xf0
 8001be6:	4393      	bics	r3, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d040      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	029b      	lsls	r3, r3, #10
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d114      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e06e      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	049b      	lsls	r3, r3, #18
 8001c26:	4013      	ands	r3, r2
 8001c28:	d108      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e062      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2202      	movs	r2, #2
 8001c34:	4013      	ands	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e05b      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2203      	movs	r2, #3
 8001c42:	4393      	bics	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c50:	f7fe fe8c 	bl	800096c <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c58:	e009      	b.n	8001c6e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5a:	f7fe fe87 	bl	800096c <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_RCC_ClockConfig+0x18c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e042      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	220c      	movs	r2, #12
 8001c74:	401a      	ands	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1ec      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <HAL_RCC_ClockConfig+0x184>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2201      	movs	r2, #1
 8001c86:	4013      	ands	r3, r2
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d211      	bcs.n	8001cb2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_RCC_ClockConfig+0x184>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2201      	movs	r2, #1
 8001c94:	4393      	bics	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <HAL_RCC_ClockConfig+0x184>)
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <HAL_RCC_ClockConfig+0x184>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e020      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d009      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a11      	ldr	r2, [pc, #68]	; (8001d08 <HAL_RCC_ClockConfig+0x190>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cd0:	f000 f820 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001cd4:	0001      	movs	r1, r0
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x188>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	220f      	movs	r2, #15
 8001cde:	4013      	ands	r3, r2
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_RCC_ClockConfig+0x194>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	000a      	movs	r2, r1
 8001ce6:	40da      	lsrs	r2, r3
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_ClockConfig+0x198>)
 8001cea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f7fe fdf7 	bl	80008e0 <HAL_InitTick>
  
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b004      	add	sp, #16
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40022000 	.word	0x40022000
 8001d00:	40021000 	.word	0x40021000
 8001d04:	00001388 	.word	0x00001388
 8001d08:	fffff8ff 	.word	0xfffff8ff
 8001d0c:	080027a8 	.word	0x080027a8
 8001d10:	20000000 	.word	0x20000000

08001d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	220c      	movs	r2, #12
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d002      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x30>
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x36>
 8001d42:	e02c      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d46:	613b      	str	r3, [r7, #16]
      break;
 8001d48:	e02c      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	0c9b      	lsrs	r3, r3, #18
 8001d4e:	220f      	movs	r2, #15
 8001d50:	4013      	ands	r3, r2
 8001d52:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d54:	5cd3      	ldrb	r3, [r2, r3]
 8001d56:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	4013      	ands	r3, r2
 8001d60:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	025b      	lsls	r3, r3, #9
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d009      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	4810      	ldr	r0, [pc, #64]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d74:	f7fe f9c8 	bl	8000108 <__udivsi3>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4353      	muls	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e009      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	000a      	movs	r2, r1
 8001d88:	0152      	lsls	r2, r2, #5
 8001d8a:	1a52      	subs	r2, r2, r1
 8001d8c:	0193      	lsls	r3, r2, #6
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	185b      	adds	r3, r3, r1
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
      break;
 8001d9c:	e002      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001da0:	613b      	str	r3, [r7, #16]
      break;
 8001da2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001da4:	693b      	ldr	r3, [r7, #16]
}
 8001da6:	0018      	movs	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b006      	add	sp, #24
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	40021000 	.word	0x40021000
 8001db4:	007a1200 	.word	0x007a1200
 8001db8:	080027c0 	.word	0x080027c0
 8001dbc:	080027d0 	.word	0x080027d0

08001dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	20000000 	.word	0x20000000

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001dd8:	f7ff fff2 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001ddc:	0001      	movs	r1, r0
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	2207      	movs	r2, #7
 8001de6:	4013      	ands	r3, r2
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
 8001dec:	40d9      	lsrs	r1, r3
 8001dee:	000b      	movs	r3, r1
}    
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	080027b8 	.word	0x080027b8

08001e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	025b      	lsls	r3, r3, #9
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d100      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e1c:	e08e      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e1e:	2017      	movs	r0, #23
 8001e20:	183b      	adds	r3, r7, r0
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e26:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e28:	69da      	ldr	r2, [r3, #28]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	055b      	lsls	r3, r3, #21
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d110      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	0549      	lsls	r1, r1, #21
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	61da      	str	r2, [r3, #28]
 8001e40:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e42:	69da      	ldr	r2, [r3, #28]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	055b      	lsls	r3, r3, #21
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4e:	183b      	adds	r3, r7, r0
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b54      	ldr	r3, [pc, #336]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d11a      	bne.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e60:	4b51      	ldr	r3, [pc, #324]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	0049      	lsls	r1, r1, #1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6e:	f7fe fd7d 	bl	800096c <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	e008      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e78:	f7fe fd78 	bl	800096c <HAL_GetTick>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e087      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e96:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e98:	6a1a      	ldr	r2, [r3, #32]
 8001e9a:	23c0      	movs	r3, #192	; 0xc0
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d034      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	23c0      	movs	r3, #192	; 0xc0
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d02c      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a3b      	ldr	r2, [pc, #236]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ec2:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ec4:	6a1a      	ldr	r2, [r3, #32]
 8001ec6:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	0249      	lsls	r1, r1, #9
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ed0:	4b34      	ldr	r3, [pc, #208]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ed2:	6a1a      	ldr	r2, [r3, #32]
 8001ed4:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ed6:	4936      	ldr	r1, [pc, #216]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe fd3f 	bl	800096c <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef2:	e009      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef4:	f7fe fd3a 	bl	800096c <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e048      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a25      	ldr	r2, [pc, #148]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f26:	2317      	movs	r3, #23
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d105      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f30:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f32:	69da      	ldr	r2, [r3, #28]
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f36:	4920      	ldr	r1, [pc, #128]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f38:	400a      	ands	r2, r1
 8001f3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	d009      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	4393      	bics	r3, r2
 8001f4e:	0019      	movs	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	4013      	ands	r3, r2
 8001f62:	d009      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	2210      	movs	r2, #16
 8001f6a:	4393      	bics	r3, r2
 8001f6c:	0019      	movs	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f74:	430a      	orrs	r2, r1
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4013      	ands	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	2240      	movs	r2, #64	; 0x40
 8001f8a:	4393      	bics	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b006      	add	sp, #24
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	fffffcff 	.word	0xfffffcff
 8001fb0:	fffeffff 	.word	0xfffeffff
 8001fb4:	00001388 	.word	0x00001388
 8001fb8:	efffffff 	.word	0xefffffff

08001fbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e044      	b.n	8002058 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2278      	movs	r2, #120	; 0x78
 8001fda:	2100      	movs	r1, #0
 8001fdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7fe fbd5 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2224      	movs	r2, #36	; 0x24
 8001fea:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 f830 	bl	8002064 <UART_SetConfig>
 8002004:	0003      	movs	r3, r0
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e024      	b.n	8002058 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0018      	movs	r0, r3
 800201a:	f000 f963 	bl	80022e4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	490d      	ldr	r1, [pc, #52]	; (8002060 <HAL_UART_Init+0xa4>)
 800202a:	400a      	ands	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	212a      	movs	r1, #42	; 0x2a
 800203a:	438a      	bics	r2, r1
 800203c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2101      	movs	r1, #1
 800204a:	430a      	orrs	r2, r1
 800204c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	0018      	movs	r0, r3
 8002052:	f000 f9fb 	bl	800244c <UART_CheckIdleState>
 8002056:	0003      	movs	r3, r0
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}
 8002060:	ffffb7ff 	.word	0xffffb7ff

08002064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800206c:	231e      	movs	r3, #30
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a8d      	ldr	r2, [pc, #564]	; (80022c8 <UART_SetConfig+0x264>)
 8002094:	4013      	ands	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a88      	ldr	r2, [pc, #544]	; (80022cc <UART_SetConfig+0x268>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a7f      	ldr	r2, [pc, #508]	; (80022d0 <UART_SetConfig+0x26c>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	430a      	orrs	r2, r1
 80020de:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a7b      	ldr	r2, [pc, #492]	; (80022d4 <UART_SetConfig+0x270>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d127      	bne.n	800213a <UART_SetConfig+0xd6>
 80020ea:	4b7b      	ldr	r3, [pc, #492]	; (80022d8 <UART_SetConfig+0x274>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	2203      	movs	r2, #3
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d00d      	beq.n	8002112 <UART_SetConfig+0xae>
 80020f6:	d81b      	bhi.n	8002130 <UART_SetConfig+0xcc>
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d014      	beq.n	8002126 <UART_SetConfig+0xc2>
 80020fc:	d818      	bhi.n	8002130 <UART_SetConfig+0xcc>
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <UART_SetConfig+0xa4>
 8002102:	2b01      	cmp	r3, #1
 8002104:	d00a      	beq.n	800211c <UART_SetConfig+0xb8>
 8002106:	e013      	b.n	8002130 <UART_SetConfig+0xcc>
 8002108:	231f      	movs	r3, #31
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
 8002110:	e021      	b.n	8002156 <UART_SetConfig+0xf2>
 8002112:	231f      	movs	r3, #31
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	2202      	movs	r2, #2
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e01c      	b.n	8002156 <UART_SetConfig+0xf2>
 800211c:	231f      	movs	r3, #31
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2204      	movs	r2, #4
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	e017      	b.n	8002156 <UART_SetConfig+0xf2>
 8002126:	231f      	movs	r3, #31
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2208      	movs	r2, #8
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e012      	b.n	8002156 <UART_SetConfig+0xf2>
 8002130:	231f      	movs	r3, #31
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2210      	movs	r2, #16
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e00d      	b.n	8002156 <UART_SetConfig+0xf2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a67      	ldr	r2, [pc, #412]	; (80022dc <UART_SetConfig+0x278>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d104      	bne.n	800214e <UART_SetConfig+0xea>
 8002144:	231f      	movs	r3, #31
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	e003      	b.n	8002156 <UART_SetConfig+0xf2>
 800214e:	231f      	movs	r3, #31
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	2210      	movs	r2, #16
 8002154:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69da      	ldr	r2, [r3, #28]
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	429a      	cmp	r2, r3
 8002160:	d15c      	bne.n	800221c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002162:	231f      	movs	r3, #31
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d015      	beq.n	8002198 <UART_SetConfig+0x134>
 800216c:	dc18      	bgt.n	80021a0 <UART_SetConfig+0x13c>
 800216e:	2b04      	cmp	r3, #4
 8002170:	d00d      	beq.n	800218e <UART_SetConfig+0x12a>
 8002172:	dc15      	bgt.n	80021a0 <UART_SetConfig+0x13c>
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <UART_SetConfig+0x11a>
 8002178:	2b02      	cmp	r3, #2
 800217a:	d005      	beq.n	8002188 <UART_SetConfig+0x124>
 800217c:	e010      	b.n	80021a0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800217e:	f7ff fe29 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002182:	0003      	movs	r3, r0
 8002184:	61bb      	str	r3, [r7, #24]
        break;
 8002186:	e012      	b.n	80021ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002188:	4b55      	ldr	r3, [pc, #340]	; (80022e0 <UART_SetConfig+0x27c>)
 800218a:	61bb      	str	r3, [r7, #24]
        break;
 800218c:	e00f      	b.n	80021ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800218e:	f7ff fdc1 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8002192:	0003      	movs	r3, r0
 8002194:	61bb      	str	r3, [r7, #24]
        break;
 8002196:	e00a      	b.n	80021ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	61bb      	str	r3, [r7, #24]
        break;
 800219e:	e006      	b.n	80021ae <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021a4:	231e      	movs	r3, #30
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
        break;
 80021ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d100      	bne.n	80021b6 <UART_SetConfig+0x152>
 80021b4:	e07a      	b.n	80022ac <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	005a      	lsls	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	18d2      	adds	r2, r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	0019      	movs	r1, r3
 80021c8:	0010      	movs	r0, r2
 80021ca:	f7fd ff9d 	bl	8000108 <__udivsi3>
 80021ce:	0003      	movs	r3, r0
 80021d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d91c      	bls.n	8002212 <UART_SetConfig+0x1ae>
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	025b      	lsls	r3, r3, #9
 80021de:	429a      	cmp	r2, r3
 80021e0:	d217      	bcs.n	8002212 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	200e      	movs	r0, #14
 80021e8:	183b      	adds	r3, r7, r0
 80021ea:	210f      	movs	r1, #15
 80021ec:	438a      	bics	r2, r1
 80021ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	085b      	lsrs	r3, r3, #1
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2207      	movs	r2, #7
 80021f8:	4013      	ands	r3, r2
 80021fa:	b299      	uxth	r1, r3
 80021fc:	183b      	adds	r3, r7, r0
 80021fe:	183a      	adds	r2, r7, r0
 8002200:	8812      	ldrh	r2, [r2, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	183a      	adds	r2, r7, r0
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	e04c      	b.n	80022ac <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002212:	231e      	movs	r3, #30
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e047      	b.n	80022ac <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800221c:	231f      	movs	r3, #31
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b08      	cmp	r3, #8
 8002224:	d015      	beq.n	8002252 <UART_SetConfig+0x1ee>
 8002226:	dc18      	bgt.n	800225a <UART_SetConfig+0x1f6>
 8002228:	2b04      	cmp	r3, #4
 800222a:	d00d      	beq.n	8002248 <UART_SetConfig+0x1e4>
 800222c:	dc15      	bgt.n	800225a <UART_SetConfig+0x1f6>
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <UART_SetConfig+0x1d4>
 8002232:	2b02      	cmp	r3, #2
 8002234:	d005      	beq.n	8002242 <UART_SetConfig+0x1de>
 8002236:	e010      	b.n	800225a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002238:	f7ff fdcc 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 800223c:	0003      	movs	r3, r0
 800223e:	61bb      	str	r3, [r7, #24]
        break;
 8002240:	e012      	b.n	8002268 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002242:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <UART_SetConfig+0x27c>)
 8002244:	61bb      	str	r3, [r7, #24]
        break;
 8002246:	e00f      	b.n	8002268 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002248:	f7ff fd64 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 800224c:	0003      	movs	r3, r0
 800224e:	61bb      	str	r3, [r7, #24]
        break;
 8002250:	e00a      	b.n	8002268 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	61bb      	str	r3, [r7, #24]
        break;
 8002258:	e006      	b.n	8002268 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800225e:	231e      	movs	r3, #30
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
        break;
 8002266:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01e      	beq.n	80022ac <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	085a      	lsrs	r2, r3, #1
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	18d2      	adds	r2, r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0019      	movs	r1, r3
 800227e:	0010      	movs	r0, r2
 8002280:	f7fd ff42 	bl	8000108 <__udivsi3>
 8002284:	0003      	movs	r3, r0
 8002286:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	d90a      	bls.n	80022a4 <UART_SetConfig+0x240>
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	025b      	lsls	r3, r3, #9
 8002294:	429a      	cmp	r2, r3
 8002296:	d205      	bcs.n	80022a4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	b29a      	uxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	e003      	b.n	80022ac <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80022a4:	231e      	movs	r3, #30
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80022b8:	231e      	movs	r3, #30
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	781b      	ldrb	r3, [r3, #0]
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b008      	add	sp, #32
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	ffff69f3 	.word	0xffff69f3
 80022cc:	ffffcfff 	.word	0xffffcfff
 80022d0:	fffff4ff 	.word	0xfffff4ff
 80022d4:	40013800 	.word	0x40013800
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40004400 	.word	0x40004400
 80022e0:	007a1200 	.word	0x007a1200

080022e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	2201      	movs	r2, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	d00b      	beq.n	800230e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a4a      	ldr	r2, [pc, #296]	; (8002428 <UART_AdvFeatureConfig+0x144>)
 80022fe:	4013      	ands	r3, r2
 8002300:	0019      	movs	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	2202      	movs	r2, #2
 8002314:	4013      	ands	r3, r2
 8002316:	d00b      	beq.n	8002330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4a43      	ldr	r2, [pc, #268]	; (800242c <UART_AdvFeatureConfig+0x148>)
 8002320:	4013      	ands	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	2204      	movs	r2, #4
 8002336:	4013      	ands	r3, r2
 8002338:	d00b      	beq.n	8002352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a3b      	ldr	r2, [pc, #236]	; (8002430 <UART_AdvFeatureConfig+0x14c>)
 8002342:	4013      	ands	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	2208      	movs	r2, #8
 8002358:	4013      	ands	r3, r2
 800235a:	d00b      	beq.n	8002374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a34      	ldr	r2, [pc, #208]	; (8002434 <UART_AdvFeatureConfig+0x150>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	2210      	movs	r2, #16
 800237a:	4013      	ands	r3, r2
 800237c:	d00b      	beq.n	8002396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a2c      	ldr	r2, [pc, #176]	; (8002438 <UART_AdvFeatureConfig+0x154>)
 8002386:	4013      	ands	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2220      	movs	r2, #32
 800239c:	4013      	ands	r3, r2
 800239e:	d00b      	beq.n	80023b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4a25      	ldr	r2, [pc, #148]	; (800243c <UART_AdvFeatureConfig+0x158>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	0019      	movs	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	4013      	ands	r3, r2
 80023c0:	d01d      	beq.n	80023fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <UART_AdvFeatureConfig+0x15c>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	035b      	lsls	r3, r3, #13
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d10b      	bne.n	80023fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a15      	ldr	r2, [pc, #84]	; (8002444 <UART_AdvFeatureConfig+0x160>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	4013      	ands	r3, r2
 8002406:	d00b      	beq.n	8002420 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <UART_AdvFeatureConfig+0x164>)
 8002410:	4013      	ands	r3, r2
 8002412:	0019      	movs	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
  }
}
 8002420:	46c0      	nop			; (mov r8, r8)
 8002422:	46bd      	mov	sp, r7
 8002424:	b002      	add	sp, #8
 8002426:	bd80      	pop	{r7, pc}
 8002428:	fffdffff 	.word	0xfffdffff
 800242c:	fffeffff 	.word	0xfffeffff
 8002430:	fffbffff 	.word	0xfffbffff
 8002434:	ffff7fff 	.word	0xffff7fff
 8002438:	ffffefff 	.word	0xffffefff
 800243c:	ffffdfff 	.word	0xffffdfff
 8002440:	ffefffff 	.word	0xffefffff
 8002444:	ff9fffff 	.word	0xff9fffff
 8002448:	fff7ffff 	.word	0xfff7ffff

0800244c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b092      	sub	sp, #72	; 0x48
 8002450:	af02      	add	r7, sp, #8
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2284      	movs	r2, #132	; 0x84
 8002458:	2100      	movs	r1, #0
 800245a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800245c:	f7fe fa86 	bl	800096c <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2208      	movs	r2, #8
 800246c:	4013      	ands	r3, r2
 800246e:	2b08      	cmp	r3, #8
 8002470:	d12c      	bne.n	80024cc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	0391      	lsls	r1, r2, #14
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4a46      	ldr	r2, [pc, #280]	; (8002594 <UART_CheckIdleState+0x148>)
 800247c:	9200      	str	r2, [sp, #0]
 800247e:	2200      	movs	r2, #0
 8002480:	f000 f88c 	bl	800259c <UART_WaitOnFlagUntilTimeout>
 8002484:	1e03      	subs	r3, r0, #0
 8002486:	d021      	beq.n	80024cc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002488:	f3ef 8310 	mrs	r3, PRIMASK
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
 8002492:	2301      	movs	r3, #1
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	f383 8810 	msr	PRIMASK, r3
}
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	438a      	bics	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	f383 8810 	msr	PRIMASK, r3
}
 80024b8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2278      	movs	r2, #120	; 0x78
 80024c4:	2100      	movs	r1, #0
 80024c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e05f      	b.n	800258c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2204      	movs	r2, #4
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d146      	bne.n	8002568 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	03d1      	lsls	r1, r2, #15
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4a2c      	ldr	r2, [pc, #176]	; (8002594 <UART_CheckIdleState+0x148>)
 80024e4:	9200      	str	r2, [sp, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f000 f858 	bl	800259c <UART_WaitOnFlagUntilTimeout>
 80024ec:	1e03      	subs	r3, r0, #0
 80024ee:	d03b      	beq.n	8002568 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024f0:	f3ef 8310 	mrs	r3, PRIMASK
 80024f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80024f6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
 80024fa:	2301      	movs	r3, #1
 80024fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f383 8810 	msr	PRIMASK, r3
}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4921      	ldr	r1, [pc, #132]	; (8002598 <UART_CheckIdleState+0x14c>)
 8002512:	400a      	ands	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f383 8810 	msr	PRIMASK, r3
}
 8002520:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002522:	f3ef 8310 	mrs	r3, PRIMASK
 8002526:	61bb      	str	r3, [r7, #24]
  return(result);
 8002528:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
 800252c:	2301      	movs	r3, #1
 800252e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f383 8810 	msr	PRIMASK, r3
}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	438a      	bics	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	f383 8810 	msr	PRIMASK, r3
}
 8002552:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	2120      	movs	r1, #32
 800255a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2278      	movs	r2, #120	; 0x78
 8002560:	2100      	movs	r1, #0
 8002562:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e011      	b.n	800258c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	2120      	movs	r1, #32
 8002574:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2278      	movs	r2, #120	; 0x78
 8002586:	2100      	movs	r1, #0
 8002588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b010      	add	sp, #64	; 0x40
 8002592:	bd80      	pop	{r7, pc}
 8002594:	01ffffff 	.word	0x01ffffff
 8002598:	fffffedf 	.word	0xfffffedf

0800259c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	1dfb      	adds	r3, r7, #7
 80025aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ac:	e04b      	b.n	8002646 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	3301      	adds	r3, #1
 80025b2:	d048      	beq.n	8002646 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b4:	f7fe f9da 	bl	800096c <HAL_GetTick>
 80025b8:	0002      	movs	r2, r0
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d302      	bcc.n	80025ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e04b      	b.n	8002666 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2204      	movs	r2, #4
 80025d6:	4013      	ands	r3, r2
 80025d8:	d035      	beq.n	8002646 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	2208      	movs	r2, #8
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d111      	bne.n	800260c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2208      	movs	r2, #8
 80025ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 f83c 	bl	8002670 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2284      	movs	r2, #132	; 0x84
 80025fc:	2108      	movs	r1, #8
 80025fe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2278      	movs	r2, #120	; 0x78
 8002604:	2100      	movs	r1, #0
 8002606:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e02c      	b.n	8002666 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	401a      	ands	r2, r3
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	429a      	cmp	r2, r3
 800261e:	d112      	bne.n	8002646 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	0112      	lsls	r2, r2, #4
 8002628:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	0018      	movs	r0, r3
 800262e:	f000 f81f 	bl	8002670 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2284      	movs	r2, #132	; 0x84
 8002636:	2120      	movs	r1, #32
 8002638:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2278      	movs	r2, #120	; 0x78
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e00f      	b.n	8002666 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	4013      	ands	r3, r2
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	425a      	negs	r2, r3
 8002656:	4153      	adcs	r3, r2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	001a      	movs	r2, r3
 800265c:	1dfb      	adds	r3, r7, #7
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d0a4      	beq.n	80025ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	0018      	movs	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	b004      	add	sp, #16
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08e      	sub	sp, #56	; 0x38
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002678:	f3ef 8310 	mrs	r3, PRIMASK
 800267c:	617b      	str	r3, [r7, #20]
  return(result);
 800267e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
 8002682:	2301      	movs	r3, #1
 8002684:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	f383 8810 	msr	PRIMASK, r3
}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4926      	ldr	r1, [pc, #152]	; (8002734 <UART_EndRxTransfer+0xc4>)
 800269a:	400a      	ands	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f383 8810 	msr	PRIMASK, r3
}
 80026a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026aa:	f3ef 8310 	mrs	r3, PRIMASK
 80026ae:	623b      	str	r3, [r7, #32]
  return(result);
 80026b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
 80026b4:	2301      	movs	r3, #1
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	f383 8810 	msr	PRIMASK, r3
}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2101      	movs	r1, #1
 80026cc:	438a      	bics	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	f383 8810 	msr	PRIMASK, r3
}
 80026da:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d118      	bne.n	8002716 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e4:	f3ef 8310 	mrs	r3, PRIMASK
 80026e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80026ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ee:	2301      	movs	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f383 8810 	msr	PRIMASK, r3
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2110      	movs	r1, #16
 8002706:	438a      	bics	r2, r1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f383 8810 	msr	PRIMASK, r3
}
 8002714:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	2120      	movs	r1, #32
 800271c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	669a      	str	r2, [r3, #104]	; 0x68
}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b00e      	add	sp, #56	; 0x38
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	fffffedf 	.word	0xfffffedf

08002738 <__libc_init_array>:
 8002738:	b570      	push	{r4, r5, r6, lr}
 800273a:	2600      	movs	r6, #0
 800273c:	4d0c      	ldr	r5, [pc, #48]	; (8002770 <__libc_init_array+0x38>)
 800273e:	4c0d      	ldr	r4, [pc, #52]	; (8002774 <__libc_init_array+0x3c>)
 8002740:	1b64      	subs	r4, r4, r5
 8002742:	10a4      	asrs	r4, r4, #2
 8002744:	42a6      	cmp	r6, r4
 8002746:	d109      	bne.n	800275c <__libc_init_array+0x24>
 8002748:	2600      	movs	r6, #0
 800274a:	f000 f821 	bl	8002790 <_init>
 800274e:	4d0a      	ldr	r5, [pc, #40]	; (8002778 <__libc_init_array+0x40>)
 8002750:	4c0a      	ldr	r4, [pc, #40]	; (800277c <__libc_init_array+0x44>)
 8002752:	1b64      	subs	r4, r4, r5
 8002754:	10a4      	asrs	r4, r4, #2
 8002756:	42a6      	cmp	r6, r4
 8002758:	d105      	bne.n	8002766 <__libc_init_array+0x2e>
 800275a:	bd70      	pop	{r4, r5, r6, pc}
 800275c:	00b3      	lsls	r3, r6, #2
 800275e:	58eb      	ldr	r3, [r5, r3]
 8002760:	4798      	blx	r3
 8002762:	3601      	adds	r6, #1
 8002764:	e7ee      	b.n	8002744 <__libc_init_array+0xc>
 8002766:	00b3      	lsls	r3, r6, #2
 8002768:	58eb      	ldr	r3, [r5, r3]
 800276a:	4798      	blx	r3
 800276c:	3601      	adds	r6, #1
 800276e:	e7f2      	b.n	8002756 <__libc_init_array+0x1e>
 8002770:	080027e0 	.word	0x080027e0
 8002774:	080027e0 	.word	0x080027e0
 8002778:	080027e0 	.word	0x080027e0
 800277c:	080027e4 	.word	0x080027e4

08002780 <memset>:
 8002780:	0003      	movs	r3, r0
 8002782:	1882      	adds	r2, r0, r2
 8002784:	4293      	cmp	r3, r2
 8002786:	d100      	bne.n	800278a <memset+0xa>
 8002788:	4770      	bx	lr
 800278a:	7019      	strb	r1, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	e7f9      	b.n	8002784 <memset+0x4>

08002790 <_init>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002796:	bc08      	pop	{r3}
 8002798:	469e      	mov	lr, r3
 800279a:	4770      	bx	lr

0800279c <_fini>:
 800279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a2:	bc08      	pop	{r3}
 80027a4:	469e      	mov	lr, r3
 80027a6:	4770      	bx	lr
